

dp PC(out pc_out : ns(5))
{
reg PCounter: ns(5);
always{
	//$display($dec, "Cycle: ", $cycle); // note : For debuging purposes.
	//$display($dec, "pc_out:", pc_out); // note : For debugging purposes.
	// todo : Insert code here!
	PCounter = PCounter + 1;
	pc_out = PCounter;
	}
}
/*system PCsystem
{
PC(pc_out);
}*/

dp Adder(in in1,in2: tc(32);out adder_out: tc(32)){
	sig a,b: tc(32);
	reg c: tc(32);
always{
	a = in1;
	b = in2;
	c = a + b;
	adder_out = c;	
	}
}

dp testAdder(out A,B:tc(32); in R:tc(32)){
	always{
	$display($dec, "Cycle:", $cycle, ", A=", A, ", B=",B, " R=",R);
	}

	sfg test_0 {A=3;B=6;}
	sfg test_1 {A=23;B=17;}
	sfg test_2 {A=12;B=0;}

}

fsm f_testbench(testAdder){
	initial s0; // begin with state s0
	state s1, s2; // other states are: s1, s2
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s0; // run test_2 and go to s0
}

system myFirstSystem{
	Adder(A, B, R);
	testAdder(A, B, R);
}